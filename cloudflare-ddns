#!/bin/sh

# Author:     Héctor Molinero Fernández <hector@molinero.dev>
# Repository: https://github.com/hectorm/cloudflare-ddns
# License:    MIT, https://opensource.org/licenses/MIT

set -eu
export LC_ALL='C'

CF_ENDPOINT="${CF_ENDPOINT:-https://api.cloudflare.com/client/v4}"

CF_API_TOKEN="${CF_API_TOKEN:-}"
CF_DNS_API_TOKEN="${CF_DNS_API_TOKEN:-${CF_API_TOKEN:-}}"
CF_ZONE_API_TOKEN="${CF_ZONE_API_TOKEN:-${CF_API_TOKEN:-}}"

CF_ZONE_NAME="${CF_ZONE_NAME:?}"
CF_ZONE_ID="${CF_ZONE_ID:-}"

CF_DNS_RECORD_NAME="${CF_DNS_RECORD_NAME:?}"
CF_DNS_RECORD_ID="${CF_DNS_RECORD_ID:-}"

printInfo() { [ -t 1 ] && printf '\033[0m[\033[1;32mINFO\033[0m] %s\n' "$@" || printf '[INFO] %s\n' "$@"; }
printWarn() { [ -t 1 ] && printf '\033[0m[\033[1;33mWARN\033[0m] %s\n' "$@" >&2 || printf '[WARN] %s\n' "$@" >&2; }
printError() { [ -t 1 ] && printf '\033[0m[\033[1;31mERROR\033[0m] %s\n' "$@" >&2 || printf '[ERROR] %s\n' "$@" >&2; }

main() {
	# Get current and previous IP address.
	if command -v kdig >/dev/null 2>&1; then
		CURR_IP="$(kdig @1.1.1.1 +tls-ca +tls-host=cloudflare-dns.com whoami.cloudflare CH TXT +short | tr -d '"')"
		PREV_IP="$(kdig @1.1.1.1 +tls-ca +tls-host=cloudflare-dns.com "${CF_DNS_RECORD_NAME:?}" A +short | tr -d '"')"
	else
		CURR_IP="$(dig @1.1.1.1 whoami.cloudflare CH TXT +short | tr -d '"')"
		PREV_IP="$(dig @1.1.1.1 "${CF_DNS_RECORD_NAME:?}" A +short | tr -d '"')"
	fi

	# If current and previous IP address match, no update is needed.
	if [ "${CURR_IP:?}" = "${PREV_IP:-}" ]; then
		exit 0
	fi

	# Retrieve CF_ZONE_ID if not defined.
	if [ -z "${CF_ZONE_ID:-}" ]; then
		CF_ZONE_ID="$(
			curl "${CF_ENDPOINT:?}/zones" \
				--request 'GET' --get --globoff --silent --show-error --fail --proto '=https' --tlsv1.3 \
				--header "Authorization: Bearer ${CF_ZONE_API_TOKEN:?}" \
				--header 'Content-Type: application/json' \
				--data-urlencode "name=${CF_ZONE_NAME:?}" \
			| jq -r '.result[0].id'
		)"

		if [ -z "${CF_ZONE_ID#null}" ]; then
			printError "'CF_ZONE_ID' is null."
			exit 1
		else
			printWarn "'CF_ZONE_ID' is not defined, set its value to \"${CF_ZONE_ID:?}\" to avoid extra API requests."
		fi
	fi

	# Retrieve CF_DNS_RECORD_ID if not defined.
	if [ -z "${CF_DNS_RECORD_ID:-}" ]; then
		CF_DNS_RECORD_ID="$(
			curl "${CF_ENDPOINT:?}/zones/${CF_ZONE_ID:?}/dns_records" \
				--request 'GET' --get --globoff --silent --show-error --fail --proto '=https' --tlsv1.3 \
				--header "Authorization: Bearer ${CF_ZONE_API_TOKEN:?}" \
				--header 'Content-Type: application/json' \
				--data-urlencode 'type=A' \
				--data-urlencode "name=${CF_DNS_RECORD_NAME:?}" \
			| jq -r '.result[0].id'
		)"

		if [ -z "${CF_DNS_RECORD_ID#null}" ]; then
			printError "'CF_DNS_RECORD_ID' is null."
			exit 1
		else
			printWarn "'CF_DNS_RECORD_ID' is not defined, set its value to \"${CF_DNS_RECORD_ID:?}\" to avoid extra API requests."
		fi
	fi

	# Update DNS record.
	curl "${CF_ENDPOINT:?}/zones/${CF_ZONE_ID:?}/dns_records/${CF_DNS_RECORD_ID:?}" \
		--request 'PUT' --globoff --silent --show-error --fail --proto '=https' --tlsv1.3 \
		--header "Authorization: Bearer ${CF_DNS_API_TOKEN:?}" \
		--header 'Content-Type: application/json' \
		--data "$(jq -cn \
			--arg name "${CF_DNS_RECORD_NAME:?}" \
			--arg content "${CURR_IP:?}" \
			'{ "type": "A", "name": $name, "content": $content, "ttl": 120, "proxied": false }' \
		)" \
		--output /dev/null

	# Purge DNS cache.
	curl "https://1.1.1.1/api/v1/purge" \
		--request 'POST' --get --globoff --silent --show-error --fail --proto '=https' --tlsv1.3 \
		--data-urlencode 'type=A' \
		--data-urlencode "domain=${CF_DNS_RECORD_NAME:?}" \
		--output /dev/null

	printInfo "Updated IP address to \"${CURR_IP:?}\"."
}

main "${@-}"
